import sys
from awsglue.transforms import *
from awsglue.utils import getResolvedOptions
from pyspark.context import SparkContext
from awsglue.context import GlueContext
from awsglue.job import Job
from awsgluedq.transforms import EvaluateDataQuality

args = getResolvedOptions(sys.argv, ['JOB_NAME'])
sc = SparkContext()
glueContext = GlueContext(sc)
spark = glueContext.spark_session
job = Job(glueContext)
job.init(args['JOB_NAME'], args)

# Default ruleset used by all target nodes with data quality enabled
DEFAULT_DATA_QUALITY_RULESET = """
    Rules = [
        ColumnCount > 0
    ]
"""

# Script generated for node tracks
tracks_node1737508890258 = glueContext.create_dynamic_frame.from_options(format_options={"quoteChar": "\"", "withHeader": True, "separator": ",", "optimizePerformance": False}, connection_type="s3", format="csv", connection_options={"paths": ["s3://dhruv-spotify-2025/staging/track.csv"], "recurse": True}, transformation_ctx="tracks_node1737508890258")

# Script generated for node album
album_node1737508888737 = glueContext.create_dynamic_frame.from_options(format_options={"quoteChar": "\"", "withHeader": True, "separator": ",", "optimizePerformance": False}, connection_type="s3", format="csv", connection_options={"paths": ["s3://dhruv-spotify-2025/staging/albums.csv"], "recurse": True}, transformation_ctx="album_node1737508888737")

# Script generated for node artist
artist_node1737508889519 = glueContext.create_dynamic_frame.from_options(format_options={"quoteChar": "\"", "withHeader": True, "separator": ",", "optimizePerformance": False}, connection_type="s3", format="csv", connection_options={"paths": ["s3://dhruv-spotify-2025/staging/artists.csv"], "recurse": True}, transformation_ctx="artist_node1737508889519")

# Script generated for node Join album artist
Joinalbumartist_node1737508967350 = Join.apply(frame1=artist_node1737508889519, frame2=album_node1737508888737, keys1=["id"], keys2=["artist_id"], transformation_ctx="Joinalbumartist_node1737508967350")

# Script generated for node Join track join
Jointrackjoin_node1737509583387 = Join.apply(frame1=tracks_node1737508890258, frame2=Joinalbumartist_node1737508967350, keys1=["track_id"], keys2=["track_id"], transformation_ctx="Jointrackjoin_node1737509583387")

# Script generated for node Drop Fields
DropFields_node1737509657427 = DropFields.apply(frame=Jointrackjoin_node1737509583387, paths=["`.track_id`", "id"], transformation_ctx="DropFields_node1737509657427")

# Script generated for node Datawarehouse
EvaluateDataQuality().process_rows(frame=DropFields_node1737509657427, ruleset=DEFAULT_DATA_QUALITY_RULESET, publishing_options={"dataQualityEvaluationContext": "EvaluateDataQuality_node1737508849762", "enableDataQualityResultsPublishing": True}, additional_options={"dataQualityResultsPublishing.strategy": "BEST_EFFORT", "observations.scope": "ALL"})
Datawarehouse_node1737509706494 = glueContext.write_dynamic_frame.from_options(frame=DropFields_node1737509657427, connection_type="s3", format="glueparquet", connection_options={"path": "s3://dhruv-spotify-2025/datawarehouse/", "partitionKeys": []}, format_options={"compression": "snappy"}, transformation_ctx="Datawarehouse_node1737509706494")

job.commit()
